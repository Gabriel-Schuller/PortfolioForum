{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRelativeUrl = parseRelativeUrl;\n\nvar _utils = require(\"../../utils\");\n\nvar _querystring = require(\"./querystring\");\n\nfunction parseRelativeUrl(url, base) {\n  const globalBase = new URL(typeof window === 'undefined' ? 'http://n' : (0, _utils).getLocationOrigin());\n  const resolvedBase = base ? new URL(base, globalBase) : globalBase;\n  const {\n    pathname,\n    searchParams,\n    search,\n    hash,\n    href,\n    origin\n  } = new URL(url, resolvedBase);\n\n  if (origin !== globalBase.origin) {\n    throw new Error(`invariant: invalid relative URL, router received ${url}`);\n  }\n\n  return {\n    pathname,\n    query: (0, _querystring).searchParamsToUrlQuery(searchParams),\n    search,\n    hash,\n    href: href.slice(globalBase.origin.length)\n  };\n}","map":{"version":3,"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,OAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,SAASF,gBAAT,CAA0BI,GAA1B,EAA+BC,IAA/B,EAAqC;AACjC,QAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,OAAOC,MAAP,KAAkB,WAAlB,GAAgC,UAAhC,GAA6C,CAAC,GAAGP,MAAJ,EAAYQ,iBAAZ,EAArD,CAAnB;AACA,QAAMC,YAAY,GAAGL,IAAI,GAAG,IAAIE,GAAJ,CAAQF,IAAR,EAAcC,UAAd,CAAH,GAA+BA,UAAxD;AACA,QAAM;AAAEK,YAAF;AAAaC,gBAAb;AAA4BC,UAA5B;AAAqCC,QAArC;AAA4CC,QAA5C;AAAmDC;AAAnD,MAA+D,IAAIT,GAAJ,CAAQH,GAAR,EAAaM,YAAb,CAArE;;AACA,MAAIM,MAAM,KAAKV,UAAU,CAACU,MAA1B,EAAkC;AAC9B,UAAM,IAAIC,KAAJ,CAAW,oDAAmDb,GAAI,EAAlE,CAAN;AACH;;AACD,SAAO;AACHO,YADG;AAEHO,SAAK,EAAE,CAAC,GAAGf,YAAJ,EAAkBgB,sBAAlB,CAAyCP,YAAzC,CAFJ;AAGHC,UAHG;AAIHC,QAJG;AAKHC,QAAI,EAAEA,IAAI,CAACK,KAAL,CAAWd,UAAU,CAACU,MAAX,CAAkBK,MAA7B;AALH,GAAP;AAOH","names":["Object","defineProperty","exports","value","parseRelativeUrl","_utils","require","_querystring","url","base","globalBase","URL","window","getLocationOrigin","resolvedBase","pathname","searchParams","search","hash","href","origin","Error","query","searchParamsToUrlQuery","slice","length"],"sources":["C:/Users/schul/OneDrive/Desktop/PROIECTPORTOFOLIU/reactforum/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.parseRelativeUrl = parseRelativeUrl;\nvar _utils = require(\"../../utils\");\nvar _querystring = require(\"./querystring\");\nfunction parseRelativeUrl(url, base) {\n    const globalBase = new URL(typeof window === 'undefined' ? 'http://n' : (0, _utils).getLocationOrigin());\n    const resolvedBase = base ? new URL(base, globalBase) : globalBase;\n    const { pathname , searchParams , search , hash , href , origin  } = new URL(url, resolvedBase);\n    if (origin !== globalBase.origin) {\n        throw new Error(`invariant: invalid relative URL, router received ${url}`);\n    }\n    return {\n        pathname,\n        query: (0, _querystring).searchParamsToUrlQuery(searchParams),\n        search,\n        hash,\n        href: href.slice(globalBase.origin.length)\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}