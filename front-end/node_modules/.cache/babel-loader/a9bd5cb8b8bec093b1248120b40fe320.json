{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mitt;\n\nfunction mitt() {\n  const all = Object.create(null);\n  return {\n    on(type, handler) {\n      (all[type] || (all[type] = [])).push(handler);\n    },\n\n    off(type, handler) {\n      if (all[type]) {\n        all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n      }\n    },\n\n    emit(type) {\n      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        evts[_key - 1] = arguments[_key];\n      }\n\n      (all[type] || []).slice().map(handler => {\n        handler(...evts);\n      });\n    }\n\n  };\n}","map":{"version":3,"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,OAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,IAAlB;;AACA,SAASA,IAAT,GAAgB;AACZ,QAAMC,GAAG,GAAGN,MAAM,CAACO,MAAP,CAAc,IAAd,CAAZ;AACA,SAAO;AACHC,MAAE,CAAEC,IAAF,EAAQC,OAAR,EAAiB;AACf,OAACJ,GAAG,CAACG,IAAD,CAAH,KAAcH,GAAG,CAACG,IAAD,CAAH,GAAY,EAA1B,CAAD,EAAgCE,IAAhC,CAAqCD,OAArC;AACH,KAHE;;AAIHE,OAAG,CAAEH,IAAF,EAAQC,OAAR,EAAiB;AAChB,UAAIJ,GAAG,CAACG,IAAD,CAAP,EAAe;AACXH,WAAG,CAACG,IAAD,CAAH,CAAUI,MAAV,CAAiBP,GAAG,CAACG,IAAD,CAAH,CAAUK,OAAV,CAAkBJ,OAAlB,MAA+B,CAAhD,EAAmD,CAAnD;AACH;AACJ,KARE;;AASHK,QAAI,CAAEN,IAAF,EAAiB;AAAA,wCAANO,IAAM;AAANA,YAAM;AAAA;;AACjB,OAACV,GAAG,CAACG,IAAD,CAAH,IAAa,EAAd,EAAkBQ,KAAlB,GAA0BC,GAA1B,CAA+BR,OAAD,IAAW;AACrCA,eAAO,CAAC,GAAGM,IAAJ,CAAP;AACH,OAFD;AAGH;;AAbE,GAAP;AAeH","names":["Object","defineProperty","exports","value","default","mitt","all","create","on","type","handler","push","off","splice","indexOf","emit","evts","slice","map"],"sources":["C:/Users/schul/OneDrive/Desktop/PROIECTPORTOFOLIU/reactforum/node_modules/next/dist/shared/lib/mitt.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = mitt;\nfunction mitt() {\n    const all = Object.create(null);\n    return {\n        on (type, handler) {\n            (all[type] || (all[type] = [])).push(handler);\n        },\n        off (type, handler) {\n            if (all[type]) {\n                all[type].splice(all[type].indexOf(handler) >>> 0, 1);\n            }\n        },\n        emit (type, ...evts) {\n            (all[type] || []).slice().map((handler)=>{\n                handler(...evts);\n            });\n        }\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}