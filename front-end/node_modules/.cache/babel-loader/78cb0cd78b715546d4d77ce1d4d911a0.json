{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMiddlewareRegex = getMiddlewareRegex;\n\nvar _routeRegex = require(\"./route-regex\");\n\nfunction getMiddlewareRegex(normalizedRoute) {\n  let catchAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const result = (0, _routeRegex).getParametrizedRoute(normalizedRoute);\n  let catchAllRegex = catchAll ? '(?!_next).*' : '';\n  let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n\n  if ('routeKeys' in result) {\n    if (result.parameterizedRoute === '/') {\n      return {\n        groups: {},\n        namedRegex: `^/${catchAllRegex}$`,\n        re: new RegExp(`^/${catchAllRegex}$`),\n        routeKeys: {}\n      };\n    }\n\n    return {\n      groups: result.groups,\n      namedRegex: `^${result.namedParameterizedRoute}${catchAllGroupedRegex}$`,\n      re: new RegExp(`^${result.parameterizedRoute}${catchAllGroupedRegex}$`),\n      routeKeys: result.routeKeys\n    };\n  }\n\n  if (result.parameterizedRoute === '/') {\n    return {\n      groups: {},\n      re: new RegExp(`^/${catchAllRegex}$`)\n    };\n  }\n\n  return {\n    groups: {},\n    re: new RegExp(`^${result.parameterizedRoute}${catchAllGroupedRegex}$`)\n  };\n}","map":{"version":3,"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,OAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;;AACA,IAAIC,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,SAASF,kBAAT,CAA4BG,eAA5B,EAA8D;AAAA,MAAjBC,QAAiB,uEAAN,IAAM;AAC1D,QAAMC,MAAM,GAAG,CAAC,GAAGJ,WAAJ,EAAiBK,oBAAjB,CAAsCH,eAAtC,CAAf;AACA,MAAII,aAAa,GAAGH,QAAQ,GAAG,aAAH,GAAmB,EAA/C;AACA,MAAII,oBAAoB,GAAGJ,QAAQ,GAAG,YAAH,GAAkB,EAArD;;AACA,MAAI,eAAeC,MAAnB,EAA2B;AACvB,QAAIA,MAAM,CAACI,kBAAP,KAA8B,GAAlC,EAAuC;AACnC,aAAO;AACHC,cAAM,EAAE,EADL;AAGHC,kBAAU,EAAG,KAAIJ,aAAc,GAH5B;AAIHK,UAAE,EAAE,IAAIC,MAAJ,CAAY,KAAIN,aAAc,GAA9B,CAJD;AAKHO,iBAAS,EAAE;AALR,OAAP;AAQH;;AACD,WAAO;AACHJ,YAAM,EAAEL,MAAM,CAACK,MADZ;AAEHC,gBAAU,EAAG,IAAGN,MAAM,CAACU,uBAAwB,GAAEP,oBAAqB,GAFnE;AAGHI,QAAE,EAAE,IAAIC,MAAJ,CAAY,IAAGR,MAAM,CAACI,kBAAmB,GAAED,oBAAqB,GAAhE,CAHD;AAIHM,eAAS,EAAET,MAAM,CAACS;AAJf,KAAP;AAMH;;AACD,MAAIT,MAAM,CAACI,kBAAP,KAA8B,GAAlC,EAAuC;AACnC,WAAO;AACHC,YAAM,EAAE,EADL;AAGHE,QAAE,EAAE,IAAIC,MAAJ,CAAY,KAAIN,aAAc,GAA9B;AAHD,KAAP;AAKH;;AACD,SAAO;AACHG,UAAM,EAAE,EADL;AAGHE,MAAE,EAAE,IAAIC,MAAJ,CAAY,IAAGR,MAAM,CAACI,kBAAmB,GAAED,oBAAqB,GAAhE;AAHD,GAAP;AAKH","names":["Object","defineProperty","exports","value","getMiddlewareRegex","_routeRegex","require","normalizedRoute","catchAll","result","getParametrizedRoute","catchAllRegex","catchAllGroupedRegex","parameterizedRoute","groups","namedRegex","re","RegExp","routeKeys","namedParameterizedRoute"],"sources":["C:/Users/schul/OneDrive/Desktop/PROIECTPORTOFOLIU/reactforum/node_modules/next/dist/shared/lib/router/utils/get-middleware-regex.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getMiddlewareRegex = getMiddlewareRegex;\nvar _routeRegex = require(\"./route-regex\");\nfunction getMiddlewareRegex(normalizedRoute, catchAll = true) {\n    const result = (0, _routeRegex).getParametrizedRoute(normalizedRoute);\n    let catchAllRegex = catchAll ? '(?!_next).*' : '';\n    let catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';\n    if ('routeKeys' in result) {\n        if (result.parameterizedRoute === '/') {\n            return {\n                groups: {\n                },\n                namedRegex: `^/${catchAllRegex}$`,\n                re: new RegExp(`^/${catchAllRegex}$`),\n                routeKeys: {\n                }\n            };\n        }\n        return {\n            groups: result.groups,\n            namedRegex: `^${result.namedParameterizedRoute}${catchAllGroupedRegex}$`,\n            re: new RegExp(`^${result.parameterizedRoute}${catchAllGroupedRegex}$`),\n            routeKeys: result.routeKeys\n        };\n    }\n    if (result.parameterizedRoute === '/') {\n        return {\n            groups: {\n            },\n            re: new RegExp(`^/${catchAllRegex}$`)\n        };\n    }\n    return {\n        groups: {\n        },\n        re: new RegExp(`^${result.parameterizedRoute}${catchAllGroupedRegex}$`)\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}