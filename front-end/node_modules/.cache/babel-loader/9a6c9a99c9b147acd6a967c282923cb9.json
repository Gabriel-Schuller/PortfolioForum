{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeLocalePath = normalizeLocalePath;\n\nfunction normalizeLocalePath(pathname, locales) {\n  let detectedLocale; // first item will be empty string from splitting at first char\n\n  const pathnameParts = pathname.split('/');\n  (locales || []).some(locale => {\n    if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n      detectedLocale = locale;\n      pathnameParts.splice(1, 1);\n      pathname = pathnameParts.join('/') || '/';\n      return true;\n    }\n\n    return false;\n  });\n  return {\n    pathname,\n    detectedLocale\n  };\n}","map":{"version":3,"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,OAAK,EAAE;AADkC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AACA,SAASA,mBAAT,CAA6BC,QAA7B,EAAuCC,OAAvC,EAAgD;AAC5C,MAAIC,cAAJ,CAD4C,CAE5C;;AACA,QAAMC,aAAa,GAAGH,QAAQ,CAACI,KAAT,CAAe,GAAf,CAAtB;AACA,GAACH,OAAO,IAAI,EAAZ,EAAgBI,IAAhB,CAAsBC,MAAD,IAAU;AAC3B,QAAIH,aAAa,CAAC,CAAD,CAAb,IAAoBA,aAAa,CAAC,CAAD,CAAb,CAAiBI,WAAjB,OAAmCD,MAAM,CAACC,WAAP,EAA3D,EAAiF;AAC7EL,oBAAc,GAAGI,MAAjB;AACAH,mBAAa,CAACK,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACAR,cAAQ,GAAGG,aAAa,CAACM,IAAd,CAAmB,GAAnB,KAA2B,GAAtC;AACA,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH,GARD;AASA,SAAO;AACHT,YADG;AAEHE;AAFG,GAAP;AAIH","names":["Object","defineProperty","exports","value","normalizeLocalePath","pathname","locales","detectedLocale","pathnameParts","split","some","locale","toLowerCase","splice","join"],"sources":["C:/Users/schul/OneDrive/Desktop/PROIECTPORTOFOLIU/reactforum/node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.normalizeLocalePath = normalizeLocalePath;\nfunction normalizeLocalePath(pathname, locales) {\n    let detectedLocale;\n    // first item will be empty string from splitting at first char\n    const pathnameParts = pathname.split('/');\n    (locales || []).some((locale)=>{\n        if (pathnameParts[1] && pathnameParts[1].toLowerCase() === locale.toLowerCase()) {\n            detectedLocale = locale;\n            pathnameParts.splice(1, 1);\n            pathname = pathnameParts.join('/') || '/';\n            return true;\n        }\n        return false;\n    });\n    return {\n        pathname,\n        detectedLocale\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}