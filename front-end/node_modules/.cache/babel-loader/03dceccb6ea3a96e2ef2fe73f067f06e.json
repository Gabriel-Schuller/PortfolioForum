{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveRewrites;\n\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\n\nvar _prepareDestination = require(\"./prepare-destination\");\n\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\n\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\n\nvar _router = require(\"../router\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst customRouteMatcher = (0, _pathMatch).default(true);\n\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n  let matchedPage = false;\n  let externalDest = false;\n  let parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(asPath);\n  let fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _router).delBasePath(parsedAs.pathname), locales).pathname);\n  let resolvedHref;\n\n  const handleRewrite = rewrite => {\n    const matcher = customRouteMatcher(rewrite.source);\n    let params = matcher(parsedAs.pathname);\n\n    if (rewrite.has && params) {\n      const hasParams = (0, _prepareDestination).matchHas({\n        headers: {\n          host: document.location.hostname\n        },\n        cookies: document.cookie.split('; ').reduce((acc, item) => {\n          const [key, ...value] = item.split('=');\n          acc[key] = value.join('=');\n          return acc;\n        }, {})\n      }, rewrite.has, parsedAs.query);\n\n      if (hasParams) {\n        Object.assign(params, hasParams);\n      } else {\n        params = false;\n      }\n    }\n\n    if (params) {\n      if (!rewrite.destination) {\n        // this is a proxied rewrite which isn't handled on the client\n        externalDest = true;\n        return true;\n      }\n\n      const destRes = (0, _prepareDestination).prepareDestination({\n        appendParamsToQuery: true,\n        destination: rewrite.destination,\n        params: params,\n        query: query\n      });\n      parsedAs = destRes.parsedDestination;\n      asPath = destRes.newUrl;\n      Object.assign(query, destRes.parsedDestination.query);\n      fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _router).delBasePath(asPath), locales).pathname);\n\n      if (pages.includes(fsPathname)) {\n        // check if we now match a page as this means we are done\n        // resolving the rewrites\n        matchedPage = true;\n        resolvedHref = fsPathname;\n        return true;\n      } // check if we match a dynamic-route, if so we break the rewrites chain\n\n\n      resolvedHref = resolveHref(fsPathname);\n\n      if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n        matchedPage = true;\n        return true;\n      }\n    }\n  };\n\n  let finished = false;\n\n  for (let i = 0; i < rewrites.beforeFiles.length; i++) {\n    // we don't end after match in beforeFiles to allow\n    // continuing through all beforeFiles rewrites\n    finished = handleRewrite(rewrites.beforeFiles[i]) || false;\n  }\n\n  matchedPage = pages.includes(fsPathname);\n\n  if (!matchedPage) {\n    if (!finished) {\n      for (let i = 0; i < rewrites.afterFiles.length; i++) {\n        if (handleRewrite(rewrites.afterFiles[i])) {\n          finished = true;\n          break;\n        }\n      }\n    } // check dynamic route before processing fallback rewrites\n\n\n    if (!finished) {\n      resolvedHref = resolveHref(fsPathname);\n      matchedPage = pages.includes(resolvedHref);\n      finished = matchedPage;\n    }\n\n    if (!finished) {\n      for (let i = 0; i < rewrites.fallback.length; i++) {\n        if (handleRewrite(rewrites.fallback[i])) {\n          finished = true;\n          break;\n        }\n      }\n    }\n  }\n\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n    externalDest\n  };\n}","map":{"version":3,"mappings":"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","names":["Object","defineProperty","exports","value","default","resolveRewrites","_pathMatch","_interopRequireDefault","require","_prepareDestination","_normalizeTrailingSlash","_normalizeLocalePath","_parseRelativeUrl","_router","obj","__esModule","customRouteMatcher","asPath","pages","rewrites","query","resolveHref","locales","matchedPage","externalDest","parsedAs","parseRelativeUrl","fsPathname","removePathTrailingSlash","normalizeLocalePath","delBasePath","pathname","resolvedHref","handleRewrite","rewrite","matcher","source","params","has","hasParams","matchHas","headers","host","document","location","hostname","cookies","cookie","split","reduce","acc","item","key","join","assign","destination","destRes","prepareDestination","appendParamsToQuery","parsedDestination","newUrl","includes","finished","i","beforeFiles","length","afterFiles","fallback"],"sources":["C:/Users/schul/OneDrive/Desktop/PROIECTPORTOFOLIU/reactforum/node_modules/next/dist/shared/lib/router/utils/resolve-rewrites.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = resolveRewrites;\nvar _pathMatch = _interopRequireDefault(require(\"./path-match\"));\nvar _prepareDestination = require(\"./prepare-destination\");\nvar _normalizeTrailingSlash = require(\"../../../../client/normalize-trailing-slash\");\nvar _normalizeLocalePath = require(\"../../i18n/normalize-locale-path\");\nvar _parseRelativeUrl = require(\"./parse-relative-url\");\nvar _router = require(\"../router\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst customRouteMatcher = (0, _pathMatch).default(true);\nfunction resolveRewrites(asPath, pages, rewrites, query, resolveHref, locales) {\n    let matchedPage = false;\n    let externalDest = false;\n    let parsedAs = (0, _parseRelativeUrl).parseRelativeUrl(asPath);\n    let fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _router).delBasePath(parsedAs.pathname), locales).pathname);\n    let resolvedHref;\n    const handleRewrite = (rewrite)=>{\n        const matcher = customRouteMatcher(rewrite.source);\n        let params = matcher(parsedAs.pathname);\n        if (rewrite.has && params) {\n            const hasParams = (0, _prepareDestination).matchHas({\n                headers: {\n                    host: document.location.hostname\n                },\n                cookies: document.cookie.split('; ').reduce((acc, item)=>{\n                    const [key, ...value] = item.split('=');\n                    acc[key] = value.join('=');\n                    return acc;\n                }, {\n                })\n            }, rewrite.has, parsedAs.query);\n            if (hasParams) {\n                Object.assign(params, hasParams);\n            } else {\n                params = false;\n            }\n        }\n        if (params) {\n            if (!rewrite.destination) {\n                // this is a proxied rewrite which isn't handled on the client\n                externalDest = true;\n                return true;\n            }\n            const destRes = (0, _prepareDestination).prepareDestination({\n                appendParamsToQuery: true,\n                destination: rewrite.destination,\n                params: params,\n                query: query\n            });\n            parsedAs = destRes.parsedDestination;\n            asPath = destRes.newUrl;\n            Object.assign(query, destRes.parsedDestination.query);\n            fsPathname = (0, _normalizeTrailingSlash).removePathTrailingSlash((0, _normalizeLocalePath).normalizeLocalePath((0, _router).delBasePath(asPath), locales).pathname);\n            if (pages.includes(fsPathname)) {\n                // check if we now match a page as this means we are done\n                // resolving the rewrites\n                matchedPage = true;\n                resolvedHref = fsPathname;\n                return true;\n            }\n            // check if we match a dynamic-route, if so we break the rewrites chain\n            resolvedHref = resolveHref(fsPathname);\n            if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n                matchedPage = true;\n                return true;\n            }\n        }\n    };\n    let finished = false;\n    for(let i = 0; i < rewrites.beforeFiles.length; i++){\n        // we don't end after match in beforeFiles to allow\n        // continuing through all beforeFiles rewrites\n        finished = handleRewrite(rewrites.beforeFiles[i]) || false;\n    }\n    matchedPage = pages.includes(fsPathname);\n    if (!matchedPage) {\n        if (!finished) {\n            for(let i = 0; i < rewrites.afterFiles.length; i++){\n                if (handleRewrite(rewrites.afterFiles[i])) {\n                    finished = true;\n                    break;\n                }\n            }\n        }\n        // check dynamic route before processing fallback rewrites\n        if (!finished) {\n            resolvedHref = resolveHref(fsPathname);\n            matchedPage = pages.includes(resolvedHref);\n            finished = matchedPage;\n        }\n        if (!finished) {\n            for(let i = 0; i < rewrites.fallback.length; i++){\n                if (handleRewrite(rewrites.fallback[i])) {\n                    finished = true;\n                    break;\n                }\n            }\n        }\n    }\n    return {\n        asPath,\n        parsedAs,\n        matchedPage,\n        resolvedHref,\n        externalDest\n    };\n}\n\n"]},"metadata":{},"sourceType":"script"}